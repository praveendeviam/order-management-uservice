/*
 * Copyright Â© 2025, Nextuple, Inc. and/or its affiliates. All rights reserved.
 *
 *
 *
 * The software, code and related documentation made available to you by Nextuple, Inc. are provided 	under a written agreement containing restrictions on use and disclosure and are protected by copyright and other intellectual property laws. As described in and unless expressly permitted in your agreement, you may not use, copy, reproduce, translate, broadcast, modify, license, transmit, distribute, exhibit, perform, publish, or display any part, in any form, or by any means. Reverse engineering, disassembly, or de-compilation of this software, unless required by law or permitted via contract for interoperability, is strictly prohibited.
 *
 * The information contained herein is subject to change without notice and is not warranted to be error-free. If you find any errors, please report them to us in writing.
 */

buildscript {
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:3.3.11"
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.32.0"
		classpath "org.sonatype.gradle.plugins:scan-gradle-plugin:1.2.4"
	}
}
plugins {
	id 'org.springframework.boot' version '3.3.11'
	id "java"
	id "io.spring.dependency-management" version "1.1.4"
	id "org.sonarqube" version "4.0.0.2929"
	id "jacoco"
	id "maven-publish"
	id "com.github.spotbugs" version "5.2.1"
	id "com.diffplug.spotless" version "6.25.0"
	id "org.owasp.dependencycheck" version "12.1.3"

}
ext {
	build_target = project.hasProperty("build_target") ? project.build_target : "SNAPSHOT"
	springCloudVersion = "2023.0.3"
	mapstructVersion = "1.5.5.Final"
	sourceJdkVersion = JavaVersion.VERSION_21
	targetJdkVersion = JavaVersion.VERSION_21
	nettyVersion = "4.1.125.Final"


}
group = 'com.order.management'
version = "0.0.36-${build_target}"
repositories {
	mavenLocal()
	mavenCentral()
}
bootJar {
	enabled = false
}

subprojects {
	apply plugin: 'idea'
	apply plugin: 'maven-publish'
	apply plugin: "com.jfrog.artifactory"
	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: "org.springframework.boot"
	apply plugin: 'jacoco'
	apply plugin: "org.sonatype.gradle.plugins.scan"
	apply plugin: "com.github.spotbugs"
	apply plugin: "com.diffplug.spotless"
	group = 'com.nextuple.neoplatform.authzconfig'
	version = "0.0.36-${build_target}"

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}
	dependencyManagement {
		imports {
			mavenBom("org.springframework.boot:spring-boot-dependencies:3.3.11")
			mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")

		}
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation group: 'com.azure.spring', name: 'spring-cloud-azure-starter-keyvault-secrets', version: '5.19.0'
		implementation 'org.springframework.boot:spring-boot-starter-actuator'
		implementation 'org.projectlombok:lombok'
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'

		implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
		implementation 'io.github.openfeign:feign-httpclient:12.3'

		implementation "org.mapstruct:mapstruct:${mapstructVersion}"

		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

		testCompileOnly 'org.projectlombok:lombok:1.18.32'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
		testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'

	}
	spotbugs {
		toolVersion = '4.8.0'
		ignoreFailures = true
		onlyAnalyze = ['com.nextuple.*']
		showStackTraces = false
	}
	jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(true)
    }
}
	processResources {
		filesMatching("**/application*.yml") {
			expand(project.properties)
		}
	}
	test {
		useJUnitPlatform()
	}

	spotless {
		java {
			importOrder()
			removeUnusedImports()
			googleJavaFormat()
		}
	}


	tasks.withType(JavaCompile) {
		finalizedBy 'spotlessApply'
	}


}

tasks.withType(JavaCompile) {
	options.compilerArgs += ['-Xlint:unchecked']
}
sourceCompatibility = "${sourceJdkVersion}"
targetCompatibility = "${targetJdkVersion}"

